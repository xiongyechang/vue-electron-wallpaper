# 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
name: vue-electron-wallpaper Actions

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
  #     - 'v*'
  # push:
  #   branches: [ master ]
  # pull_request:
  #   branches: [ master ]
  push:
    tags:
      - "v*"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    # 在执行 workflow 时, 允许在 GitHub Actions 页面输入参数，
    # 控制执行逻辑。我们可以将人工处理的逻辑，
    # 在 GitHub Actions 参数化执行，适用于持续部署场景。
    # inputs:
    #   logLevel:
    #     description: 'Log level'     
    #     required: true
    #     default: 'warning'
    #   tags:
    #     description: 'Test scenario tags'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  Linux:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 第一步：下载源码（CI/CD拉取代码到自己的本地）
      - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@master

      # 第二步: 设置node版本
      - name: Set Node Version
        uses: actions/setup-node@v1
        with:
          node-version: 14.18.2

      - name: Install Packages
        run: npm install

      - name: Get package.json meta
        id: get_metadata
        run: node ${{github.workspace}}/.github/actions/get-metadata.js

      # 构建
      - name: Build-Setup
        uses: actions/setup-node@master

      - name: build:linux
        run: npm run build:linux

      # 发布 Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: echo name & version
        env: 
          NAME: ${{ steps.get_metadata.outputs.NAME }}
          VERSION: ${{ steps.get_metadata.outputs.VERSION }}
          UPLOADURL: ${{ steps.create_release.outputs.upload_url }}
        run: echo "$NAME:$VERSION:$UPLOADURL"

      - name: Upload Release Asset:AppImage
        uses: actions/upload-artifact@v2
        with:
          path: dist_electron/${{steps.get_metadata.outputs.NAME}}-${{steps.get_metadata.outputs.VERSION}}.AppImage
          name: ${{ steps.get_metadata.outputs.NAME }}-${{ steps.get_metadata.outputs.VERSION }}.AppImage

      - name: Upload Release Asset:deb
        uses: actions/upload-artifact@v2
        with:
          path: dist_electron/${{ steps.get_metadata.outputs.NAME }}_${{ steps.get_metadata.outputs.VERSION }}_amd64.deb
          name: ${{ steps.get_metadata.outputs.NAME }}-${{ steps.get_metadata.outputs.VERSION }}_amd64.deb
        
      - name: Upload Release Asset:rpm
        uses: actions/upload-artifact@v2
        with:
          path: dist_electron/${{ steps.get_metadata.outputs.NAME }}-${{ steps.get_metadata.outputs.VERSION }}.x86_64.rpm
          name: ${{ steps.get_metadata.outputs.NAME }}-${{ steps.get_metadata.outputs.VERSION }}.x86_64.rpm

  Windows:
    runs-on: windows-latest

    steps:
      # 第一步：下载源码（CI/CD拉取代码到自己的本地）
      - name: Checkout
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@master

      # 第二步: 设置node版本
      - name: Set Node Version
        uses: actions/setup-node@v1
        with:
          node-version: 14.18.2

      - name: Install Packages
        run: npm install

      - name: Get package.json meta
        id: get_metadata
        run: node ${{github.workspace}}/.github/actions/get-metadata.js

      # 构建
      - name: Build-Setup
        uses: actions/setup-node@master

      - name: build:win
        run: npm run build:win

      - name: Upload Release Asset:exe
        uses: actions/upload-artifact@v2
        with:
          path: dist_electron/${{steps.get_metadata.outputs.NAME}}@${{steps.get_metadata.outputs.VERSION}}.exe
          name: ${{ steps.get_metadata.outputs.NAME }}@${{ steps.get_metadata.outputs.VERSION }}.exe

      - name: Upload Windows:Blockmap
        uses: actions/upload-artifact@v2
        with:
          path: dist_electron/${{ steps.get_metadata.outputs.NAME }}@${{ steps.get_metadata.outputs.VERSION }}.exe.blockmap
          name: ${{ steps.get_metadata.outputs.NAME }}@${{ steps.get_metadata.outputs.VERSION }}.exe.blockmap